<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="com.hi.*"></context:component-scan>


    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          p:location="classpath:/project.properties" />

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>

        <property name="initialSize" value="10"/>
        <property name="maxActive" value="100"/>
        <property name="numTestsPerEvictionRun" value="100"/>
        <property name="maxIdle" value="10"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testWhileIdle" value="true"/>
        <property name="validationQuery" value="select 1"/>

        <!-- 设置在自动回收超时连接的时候打印连接的超时错误  -->
        <property name="logAbandoned" value="true"/>
        <!-- 设置自动回收超时连接 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超时时间(以秒数为单位) -->
        <property name="removeAbandonedTimeout" value="10"/>
        <!-- 超时等待时间以毫秒为单位  -->
        <property name="maxWait" value="10000"/>
        <property name="timeBetweenEvictionRunsMillis" value="300000"/>
        <property name="minEvictableIdleTimeMillis" value="3600000"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="dao" class="com.sf.common.database.dao.BaseDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>
    </bean>

    <!--<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--<tx:annotation-driven transaction-manager="txManager"/>-->

    <!--<context:annotation-config/>-->
        <!--<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>-->
    <!--&lt;!&ndash;<context:component-scan base-package="com.bike.route.task.*"/>&ndash;&gt;-->
    <!--<task:annotation-driven/>-->

    <!--<bean id="taskJob" class="com.bike.bananacard.task.TaskJob"/>-->
    <!--<task:scheduled-tasks>-->
        <!--<task:scheduled ref="taskJob" method="run" initial-delay="1000" fixed-delay="${task.fixed.delay}"/>-->
    <!--</task:scheduled-tasks>-->


    <!-- 系统服务组件的切面Bean -->
    <!-- <bean id="commonLog" class="com.bike.apicommon.CommonLog"/>
    <aop:config>
        <aop:aspect id="simpleAspect" ref="commonLog">
            <aop:pointcut expression="execution(* com.bike.bananacard.api.*.*.*.*.*(..)) or execution(* com.bike.user.service.impl.*.*(..)) or execution(* com.bike.route.business.impl.*.*(..))
            or  execution(* com.bike.sns.service.impl.BasnsAccountFollowServiceImpl.*(..)) or  execution(* com.bike.sns.service.impl.BasnsAccountLikeServiceImpl.*(..))
            or  execution(* com.bike.sns.service.impl.BasnsAccountListServiceImpl.*(..)) or  execution(* com.bike.sns.service.impl.BasnsAccountRecommendServiceImpl.*(..))
            or  execution(* com.bike.sns.service.impl.BasnsGameTogetherServiceImpl.*(..))" id="simplePointcut"/>
            <aop:after-throwing pointcut-ref="simplePointcut" method="afterThrowing" throwing="throwable" />
            <aop:after-returning  pointcut-ref="simplePointcut" method="afterReturn"  returning="retValue" />
        </aop:aspect>
    </aop:config>-->


    <!--<import resource="applicationContext-mq.xml"/>-->
    <import resource="applicationContext-mvc.xml"/>
    <!--<import resource="spring-consumer.xml"/>-->
</beans>

